21:23 12-4-2020
observations videoseries
- ... (een aantal komt nog wel eens)

[X]
https://youtu.be/izlLVx_dTH0?list=PLC3y8-rFHvwhI0V5mE9Vu6Nm-nap8EcjV&t=208
- In tsconfig moet gezet worden "noImplicitAny": false, (r.27), anders klaagt de compiler dat de formele parameter name impliciet 'any'is.  Dit gaat wel even ten koste van het hele begrip hoisten. Waarmee bedoeld wordt dat je een variable overal in een scope mag declareren (var). Wordt naar boven geslingerd.
takeway: var heeft functional scope: een variabele gedeclareerd in een functie met var is zichtbaar in die functie
let (es2015) heeft blockscope (curly braces scope)
in tutorial 5 vervangen we var (functional scope, scope in de functie) door let (block scope). gaat mis want console staat buiten de curly braces van de if else statement. Oplossen door let in de buitenste curly braces te plaatsen . let is scope gebonden en kan een variabele in ee scope op een andere waarde zetten. Daarna neemt die var zn oude waarde weer aan.
let wordt niet gehoist en je kunt een variabele niet redeclaren.


var a=1;
var a=2;

gaat

let a=1;
let a=2;

error: Cannot redeclare block-scoped variable
[?] So wie so raar dat je variabelen meermaals kunt declareren.


En zo zijn we gestopt.
https://youtu.be/WiwMkh9_WGw?list=PLC3y8-rFHvwhI0V5mE9Vu6Nm-nap8EcjV&t=14

14:05 13-4-2020
[X] favicon toegevoegd
[!] Live reload is een onderdeel van webpack. Dus als we dat ooit instalieren gaat de website 3000 ook automagisch
[!] Tutorial 7. The can of worms opens wider! Iffys zie hier:
https://stackabuse.com/javascripts-immediately-invoked-function-expressions/

[!] arrow functions dont have there own this (gewone functie creeren hun eigen context, Overigens ook weer een indicatie hoe raar het is dat je functions als 1st class objects bombardeerd. He bombardeerd, Willyyyyyy
[!] is es2015 kan je initwaarden meegeven bij decalaratie van functies (sterker de initwaarde is de default als je geen waarde meegeeft bij aanroepen

[!] functieaanroep meerdere parameters 1 parameter niet: gebruik undefined. De default kan ook een formuletje zijn of zelfs een arrow function. You can go holy moly dipshit on this one
https://youtu.be/6eOOh1b03-o?list=PLC3y8-rFHvwhI0V5mE9Vu6Nm-nap8EcjV&t=377 

[!] ...parameter is de rest parameter. Gebruikt bij formele parameter van de functie . 1 of meerdere parameters wat er ook overblijft.

De tegenhanger heet de spread operator en ziet er hetzelfde uit. Wordt alleen gebruikt bij het aanroepen nen is dus de actuele parameter. Zie 
https://youtu.be/Fc6DPYx9aQU?list=PLC3y8-rFHvwhI0V5mE9Vu6Nm-nap8EcjV&t=150

Alles leuk en aardig maar dit zijn 50 filmpjes. Laten we zeggen: ik ga die gast zn reduxcourse volgen en deze rest komt nog welles. Ik ben gebleven bij:
https://youtu.be/Fc6DPYx9aQU?list=PLC3y8-rFHvwhI0V5mE9Vu6Nm-nap8EcjV&t=150


Gaat helemaal goed komen

We zijn nu hier
16:58 13-4-2020
https://www.youtube.com/watch?v=QFaFIcGhPoM&list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&index=1

Er wordt npx create-react-app gebruikt. Dit is het Runnen van een package -vs- het Installeren van een package. Voordelen: je gebruikt altijd de laatste versie. Wat ook (nog) kan is eerst installeren npm install create-react-app -g en dan runnen. 
 
COmponents 1 per js file. Pascal case convention (Hoofletturs)

[!] Export gaat default (dan mag je hem bij de import elke naam geven die je leuk vind. Bij een named export, moet je de naam van de functie aanhouden. En dan ook nog eens als curly braces.
import {Greet (naam van de const functie) } from,,,,,, 

export const Greet =(),,,,,
default exports komen vaker voor.
[!] class components nemen net als functional components props aan en geven html (jsx) af maar kennen daarnaast nog een internal state

[!] Functional components hebben in het gebruik de voorkeur (if you can choose between functional and class go for functional)

Voordelen van Functional components
- no this keyword
- Solution without state (less overhead)
- Mailnly respponsible for ui
- also called Stateless / dumb or presentational 

Voordelen van class components
- feature ritch
- maintain private data state
- Complex ui logic
- Provide lifecycle hooks
-  also called Statefull / Smart / Container 

Gelukkig is er een update die dit allemaal weer te niet doet vanaf 
16.7 kan je state en hooks en dergelijke ook gebruiken in functional clases. Wijziging is opt in en 100% backwards compatible No breaking changes. Functional en Classcomponents lijken dus iets meer op elkaar.

JSX is een extension to js syntax
jsx makes code simppeler en elegant

[!] Verschillen tussen html en jsx
Class->ClassName (Class is reserved word)
for->htmlFor
camelCase prperty naming convention
* onclick wordt onClick
* tabindex wordt tabIndex

en er zitten nog meer breaking changes aan te komen
 



Sideline uitleg van jsx
done

jsx kan nu maar 1 element returnen  dus als je meerdere elements wil terugsturen: gebruik een div tag.

Tot hiero. Verder met
https://youtu.be/m7OWXtbiXX8?list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&t=522




 